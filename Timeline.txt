Project Timeline – Final Frozen Plan (Supabase Edition)
Phase 1 – Setup & Base Architecture (Days 1–3)
• Initialize GitHub repo, create project structure for frontend and backend.
• Setup Supabase project (Postgres DB + Auth).
• Setup Express server and connect with Supabase.
• Setup Vite + TailwindCSS frontend with routing.
• Deploy placeholder apps (Vercel + Render) to test CI/CD.

Phase 2 – LeetCode Data Sync & Dashboard (Days 4–6)
• Implement API call to LeetCode (manual username) → save solved problem stats in Supabase.
• Create /api/stats endpoint for processed data (topic accuracy, streaks).
• Build Dashboard UI (topic bars, streak heatmap, today’s tasks placeholder).
• AI insights: basic GPT summary from stats.

Phase 3 – Problem Recommendations (Days 7–8)
• Build backend route /api/recommendations → filters solved problems, returns suggestions.
• Integrate OpenAI for "reason to solve" text.
• Frontend: Problem cards UI with topic, difficulty, company filters.

Phase 4 – Daily Plan Generator (Days 9–10)
• Build /api/generateplan route using OpenAI.
• Store structured plan JSON in Supabase.
• Frontend: Form for inputs → renders generated plan with Modify option.
• Sync "Today’s Tasks" in Dashboard.

Phase 5 – Mock Interview (Days 11–12)
• Build /api/mocksession route (AI conversation, store transcript in Supabase).
• Frontend: Chatstyle mock UI with code editor.
• Generate flashcards automatically from transcript mistakes.

Phase 6 – Flashcard System (Days 13–14)
• Build /api/flashcards route → fetches user’s flashcards from Supabase.
• Flipcard UI with ■ / ■ marking, repetition logic.
• Export to PDF option.

Phase 7 – Final Integration & Polishing (Days 15–16)
• Test data flow endtoend (LeetCode → AI → Supabase → UI).
• Improve error handling, auth, and realtime updates.
• UI polish: transitions, better layout, icons.
• Deploy final build (frontend + backend).

Phase 8 – Optional Stretch Goals (Post-MVP)
• Autosync LeetCode account (GraphQL login).
• WebSocket realtime mock interviews.
• Advanced PDF report generator (entire plan + stats).

